from @std/app import start, print, eprint, exit
from @std/cmd import exec
from @std/http import connection, Connection, fetch, Request, Response, body, send, listen

on start {
  print('Starting Anycloud...');
  const untarRes = exec('tar -xzf app.tar.gz');
  if untarRes.exitCode != 0 {
    eprint('app.tar.gz could not be unpacked');
    eprint(untarRes.stderr);
    emit exit untarRes.exitCode;
  }

  const dockerRes = exec('docker build -t anycloud/app .');
  if dockerRes.exitCode != 0 {
    eprint('Docker container could not be built');
    eprint(dockerRes.stderr);
    emit exit dockerRes.exitCode;
  }

  const containerRes = exec('docker run -p 8088:8088 -d anycloud/app:latest');
  if containerRes.exitCode != 0 {
    eprint('Docker container could not be started');
    eprint(containerRes.stderr);
    emit exit containerRes.exitCode;
  }

  const serverRes = listen(80);
  if serverRes.isErr() {
    eprint('Could not listen on port 80');
    emit exit 80;
  } else {
    print('Listening on port 80');
  }
}

on connection fn (conn: Connection) {
  const req = conn.req;
  const innerRes = fetch(new Request {
    method: req.method,
    headers: req.headers,
    body: req.body,
    url: 'http://localhost:8088' + req.url,
  });
  const res = conn.res;
  if innerRes.isErr() {
    res.status = 500;
    res.body('Internal Server Error').send();
  } else {
    const unwrappedRes = innerRes.getOrExit(); // Safe because of conditional checking
    res.status = unwrappedRes.status;
    res.headers = unwrappedRes.headers;
    res.body(unwrappedRes.body).send();
  }
}

